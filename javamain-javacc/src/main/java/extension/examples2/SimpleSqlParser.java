/* Generated By:JavaCC: Do not edit this line. SimpleSqlParser.java */
package extension.examples2;

import java.io.Reader;
import java.io.StringReader;
import java.util.List;

public class SimpleSqlParser implements SimpleSqlParserConstants {

    public void parse() throws ParseException {
         SqlAttr sqlAttr = SFWStatement();
         System.out.println("OK");
    }
    public SimpleSqlParser(String expr) {
        this((Reader)(new StringReader(expr)));
    }
    public static void main(String[] args) throws Exception{
        final SimpleSqlParser parser = new SimpleSqlParser(String.join(" ", args));
        parser.parse();
    }

  final public SqlAttr SFWStatement() throws ParseException {
    SqlAttr sqlAttr = new SqlAttr();
    String tbName = "";
    SelectClause(sqlAttr.getSelectColumnList());
    tbName = FromClause();
    WhereClause(sqlAttr.getWhereColumList());
    sqlAttr.setTableName(tbName);
    {if (true) return sqlAttr;}
    throw new Error("Missing return statement in function");
  }

  final public void SelectClause(List<Column> columnList) throws ParseException {
    jj_consume_token(SELECT);
    Attr(columnList);
  }

  final public void Attr(List<Column> columnList) throws ParseException {
  Token relation;
  Token attr;
    relation = jj_consume_token(NAME);
    jj_consume_token(DOT);
    attr = jj_consume_token(NAME);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      Attr(columnList);
    }
    Column column =  new Column(relation.image, attr.image);
    columnList.add(column);
  }

  final public String FromClause() throws ParseException {
  String from;
    jj_consume_token(FROM);
    from = TableName();
    {if (true) return from;}
    throw new Error("Missing return statement in function");
  }

  final public String TableName() throws ParseException {
  Token t;
    t = jj_consume_token(NAME);
   {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public void WhereClause(List<KV> kvList) throws ParseException {
    jj_consume_token(WHERE);
    Expression(kvList);
  }

  final public void Expression(List<KV> whereColumList) throws ParseException {
    Factor(whereColumList);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
      Expression(whereColumList);
    }
  }

  final public void Factor(List<KV> whereColumList) throws ParseException {
  Column left;
  String right = "";
  String operator;
    left = LeftAttr();
    operator = Operator();
    right = RightAttr();
    KV kv = new KV();
    kv.setKey(left);
    kv.setOperator(operator);
    kv.setValue(right);
    whereColumList.add(kv);
  }

  final public Column LeftAttr() throws ParseException {
  Token rel;
  Token attr;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      rel = jj_consume_token(NAME);
      jj_consume_token(DOT);
      attr = jj_consume_token(NAME);
    {if (true) return new Column(rel.image, attr.image);}
      break;
    case QUO:
      jj_consume_token(QUO);
      rel = jj_consume_token(NAME);
      jj_consume_token(QUO);
    {if (true) return new Column(rel.image);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String RightAttr() throws ParseException {
  Token rel;
    rel = jj_consume_token(NAME);
   {if (true) return rel.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Operator() throws ParseException {
  Token operator;
    operator = jj_consume_token(OPERATOR);
   {if (true) return operator.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SimpleSqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x100,0x2400,};
   }

  /** Constructor with InputStream. */
  public SimpleSqlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleSqlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleSqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SimpleSqlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleSqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SimpleSqlParser(SimpleSqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleSqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
