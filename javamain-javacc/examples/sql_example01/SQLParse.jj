// 参考： https://github.com/gtxistxgao/SQLParser/blob/master/src/SQLParser.jj

/**
 *
 * 2016 Apr 5, 2016 Main.java
 *
 * @author: TianxiangGao
 * @contact: gtx@iastate.edu
 *
 */
/*

set the options as what we need. First ignore the case and make the method static

*/
options
{
  IGNORE_CASE = true;
  STATIC = true;
}

/*

initialize the parse method and start to parse when call this method. This method will return the AST based on the query we get.

*/
PARSER_BEGIN(Parser)
public class Parser
{
  public static String parse(String args) throws Exception
  {
    Parser parse = new Parser(new java.io.StringReader(args));
    String rst = parse.Query();
    return rst;
  }
}

PARSER_END(Parser)

/*

set up tokens first. SKIP tokens of " ", "\t", "\r" and "\n"

*/
SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{
  < USE : "USE" >
| < WHERE : "WHERE" >
| < AND : "AND" >
}

/*

in case of the query has "(" and ")". they should also be set as OPEN_PAR and CLOSE_PAR token

*/
TOKEN :
{
  < OPEN_PAR : "(" >
}

TOKEN :
{
  < CLOSE_PAR : ")" >
}

TOKEN :
{
  < DOT : "." >
}

TOKEN :
{
  < COMMA : "," >
}

/*

in case that quotation mark " will be used in the where part when it's a STRINGLITERAL

*/
TOKEN :
{
  < QUO : "\"" >
}

/*

because operator has no difference in parse query into AST. So we set them all as OPERATOR

*/
TOKEN :
{
  < OPERATOR :
  "="
  >
}

/*

this token represent only the numbers. it will be used in the where clause to recognize the INTEGERLITERAL

*/
TOKEN :
{
  < DIGITS : ([ "0"-"9" ])+ >
}

/*

this token will represent all the mix of table name or attribute name

*/
TOKEN :
{
  < NAME : ([ "a"-"z", "0"-"9" ])+ >
}

/*

start the query, call SFWStatement() and add "<dbQuery>""</dbQuery>" out of the SFWStatement.

*/
String Query() :
{
  String rst;
}
{
  rst = SFWStatement() < EOF >
  {
    return "<dbQuery>" + rst + "</dbQuery>";
  }
}

/*

first check the select clause
then check the from clause
finally check the where clause

*/
String SFWStatement() :
{
  String use = "";
  String where = "";
}
{
  select = UseClause() where = WhereClause()
  {
    return "<dbSFWStatement>" + use + where + "</dbSFWStatement>";
  }
}

/*

this is the select clause, we need to find all the attribute so we call Attr method

*/
String UseClause() :
{
  String select;
}
{
  < USE > use = Attr()
  {
    return "<dbSelectClause>" + use + "</dbSelectClause>";
  }
}
/*

this method will recursively find all the attribute in the select clause and return all the attribute as one String.

*/

String Attr() :
{
  Token relation;
  Token attr;
  String subAttr = "";
}
{
  relation = < NAME > < DOT > attr = < NAME >
  /*

  the next regular expression will recursively all it self to find all the attributes.
  The warning is fine in this command because javacc prefer us to use LOOKAHEAD, but this way is also fine

  */
  (
    < COMMA > subAttr = Attr()
  )*
  {
    return "<dbAttr>" + "<dbRelVar> <dbRelAliasName Token=\"" + relation.image + "\" /> </dbRelVar>" + "<dbAttrName Token=\"" + attr.image + "\" /> " + "</dbAttr>" + subAttr;
  }
}

/*

this method will find all the relations in the from clause

*/

String RelVal() :
{
  Token realName;
  Token aliasName;
  String subVal = "";
}
{
  realName = < NAME > aliasName = < NAME >
  /*

  next regular expression will recursively all this method to find all the reaName and aliasName in the from clause

  */
  (
    < COMMA > subVal = RelVal()
  )*
  {
    return "<dbRelVar>" + "<dbRelName Token=\"" + realName.image + "\" />" + "<dbRelAliasName Token=\"" + aliasName.image + "\" /> </dbRelVar>" + subVal;
  }
}
/*

next is the where clause. It will have several recursion next in this method.
First we call Expression and assign false to represent that this is the first time we call it, So it must add <BooleanExp><\BooleanExp> out of the where clause abstract syntex tree

*/

String WhereClause() :
{
  String where = "";
}
{
  < WHERE > where = Expression(false)
  {
    return "<dbWhereClause>" + where + "</dbWhereClause>";
  }
}
/*

this method will find all the boolean factors and add BooleanExp in the case we have more than two boolean factors or has parenthesis in some of the boolean factors.

*/

String Expression(boolean hasFather) :
{
  String exp1 = "";
  String exp2 = "";
}
{
  /*

  first check if there is parenthesis in this boolean expression, if true, we take the first boolean factor and check if there are parenthesis in this parenthesis and pass a true value to the next recursion in the case when we have"((...))" in the query

  */
  < OPEN_PAR > exp1 = Expression(true) < CLOSE_PAR >
  (
    < AND > exp2 = Expression(true)
  )*
  {
    /* if hasFather == true means we have the <BooleanExp></BooleanExp> out of this time's call.
    	then we check if exp2 is empty. if exp2 is empty after the parsing. This means this time is the final BooleanFactor in this BooleanExpression and we don't want to have a single BooleanFactor in the BooleanExp, so we will not add "<BooleanExp>"..."</BooleanExp>" out of it.
    */
    if (hasFather == true && exp2.equals(""))
    {
      return exp1;
    }
    /* if it has no father parenthesis out of it or exp2 not empty, we need to add the BooleanExp out of exp1 + exp2*/
    return "<BooleanExp>" + exp1 + exp2 + "</BooleanExp>";
  }
  /* next, if the first token is not parenthesis, we need to check if this satisfy the boolean factor rules. So we call Factor() method to parse it*/
| exp1 = Factor()
  /* if the first factor is good, we need to check the next one. the next one can be a boolean factor or a parenthesis, so we call Expression() method again.*/
  (
    < AND > exp2 = Expression(true)
  )*
  {
    /*the next check has the same function as the previous checking*/
    if (hasFather == true && exp2.equals(""))
    {
      return exp1;
    }
    else
    {
      return "<BooleanExp>" + exp1 + exp2 + "</BooleanExp>";
    }
  }
}
/*

this method will parse the Boolean factor. It can be three situation.
1. it is a table.Attribute. such as "Emp.Name = Dep.MName"
2. it is a string literal. such as "Emp.Name = "james""
3. it is a integer literal. such as "Emp.Salary = 7000"
So we can find all three situation has a left part and and an operation and a right part.

*/

String Factor() :
{
  String left = "";
  String right = "";
  String operator;
}
{
  /*so we parse the left, right and operator one by one*/
  left = BooleanAttr()
  operator = Operator()
  right = BooleanAttr()
  {
    return "<BooleanFactor>" + left + operator + right + "</BooleanFactor>";
  }
}
/*

the attribute can have three situation as well.
1. name.name such as "Emp.Name"
2. String Literal such as "James"
3. Integer Literal such as 7000

so this method will check them and return the corresponding attribute

*/

String BooleanAttr() :
{
  Token rel;
  Token attr;
  String attrName = "";
}
{
  rel = < DIGITS >
  {
    return "<dbConstValue> <INTEGERLITERAL Token=\"" + rel.image + "\"/> </dbConstValue>";
  }
| rel = < NAME > < DOT > attr = < NAME >
  {
    return "<dbAttr>" + "<dbRelVar> <dbRelAliasName Token=\"" + rel.image + "\" /> </dbRelVar>" + "<dbAttrName Token=\"" + attr.image + "\" /> </dbAttr>";
  }
| < QUO > rel = < NAME > < QUO >
  {
    return "<dbConstValue><STRINGLITERAL Token=\"" + rel.image + "\"/> </dbConstValue>";
  }
}
/*this method will check the operator and return it as it is. */

String Operator() :
{
  Token operator;
}
{
  operator = < OPERATOR >
  {
    return "<comparisonOp Token=\"" + operator.image + "\" />";
  }
}